(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('textarea-caret'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-text-input-autocomplete', ['exports', '@angular/core', 'rxjs', 'textarea-caret', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['angular-text-input-autocomplete'] = {}),global.ng.core,global.rxjs,global.getCaretCoordinates,global.rxjs.operators,global.ng.common));
}(this, (function (exports,core,rxjs,getCaretCoordinates,operators,common) { 'use strict';

    getCaretCoordinates = getCaretCoordinates && getCaretCoordinates.hasOwnProperty('default') ? getCaretCoordinates['default'] : getCaretCoordinates;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TextInputAutocompleteMenuComponent = (function () {
        function TextInputAutocompleteMenuComponent() {
            this.selectChoice = new rxjs.Subject();
            this.choiceLoading = false;
            this.trackById = function (index, choice) {
                return typeof choice.id !== 'undefined' ? choice.id : choice;
            };
        }
        Object.defineProperty(TextInputAutocompleteMenuComponent.prototype, "choices", {
            get: /**
             * @return {?}
             */ function () {
                return this._choices;
            },
            set: /**
             * @param {?} choices
             * @return {?}
             */ function (choices) {
                this._choices = choices;
                if (choices.indexOf(this.activeChoice) === -1 && choices.length > 0) {
                    this.activeChoice = choices[0];
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        TextInputAutocompleteMenuComponent.prototype.onArrowDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                var /** @type {?} */ index = this.choices.indexOf(this.activeChoice);
                if (this.choices[index + 1]) {
                    this.scrollToChoice(index + 1);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TextInputAutocompleteMenuComponent.prototype.onArrowUp = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                var /** @type {?} */ index = this.choices.indexOf(this.activeChoice);
                if (this.choices[index - 1]) {
                    this.scrollToChoice(index - 1);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TextInputAutocompleteMenuComponent.prototype.onEnter = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.choices.indexOf(this.activeChoice) > -1) {
                    event.preventDefault();
                    this.selectChoice.next(this.activeChoice);
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        TextInputAutocompleteMenuComponent.prototype.scrollToChoice = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.activeChoice = this._choices[index];
                if (this.dropdownMenuElement) {
                    var /** @type {?} */ ulPosition = this.dropdownMenuElement.nativeElement.getBoundingClientRect();
                    var /** @type {?} */ li = this.dropdownMenuElement.nativeElement.children[index];
                    var /** @type {?} */ liPosition = li.getBoundingClientRect();
                    if (liPosition.top < ulPosition.top) {
                        li.scrollIntoView();
                    }
                    else if (liPosition.bottom > ulPosition.bottom) {
                        li.scrollIntoView(false);
                    }
                }
            };
        TextInputAutocompleteMenuComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mwl-text-input-autocomplete-menu',
                        template: "\n    <ul \n      *ngIf=\"choices?.length > 0\"\n      #dropdownMenu\n      class=\"dropdown-menu\"\n      [style.top.px]=\"position?.top\"\n      [style.left.px]=\"position?.left\">\n      <li\n        *ngFor=\"let choice of choices; trackBy:trackById\"\n        [class.active]=\"activeChoice === choice\">\n        <a\n          href=\"javascript:;\"\n          (click)=\"selectChoice.next(choice)\">\n          {{ choice }}\n        </a>\n      </li>\n    </ul>\n  ",
                        styles: [
                            "\n      .dropdown-menu {\n        display: block;\n        max-height: 200px;\n        overflow-y: auto;\n      }\n    "
                        ]
                    },] },
        ];
        TextInputAutocompleteMenuComponent.propDecorators = {
            dropdownMenuElement: [{ type: core.ViewChild, args: ['dropdownMenu',] }],
            onArrowDown: [{ type: core.HostListener, args: ['document:keydown.ArrowDown', ['$event'],] }],
            onArrowUp: [{ type: core.HostListener, args: ['document:keydown.ArrowUp', ['$event'],] }],
            onEnter: [{ type: core.HostListener, args: ['document:keydown.Enter', ['$event'],] }]
        };
        return TextInputAutocompleteMenuComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TextInputAutocompleteDirective = (function () {
        function TextInputAutocompleteDirective(componentFactoryResolver, viewContainerRef, injector, elm) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.viewContainerRef = viewContainerRef;
            this.injector = injector;
            this.elm = elm;
            /**
             * The character that will trigger the menu to appear
             */
            this.triggerCharacter = '@';
            /**
             * The regular expression that will match the search text after the trigger character
             */
            this.searchRegexp = /^\w*$/;
            /**
             * The menu component to show with available options.
             * You can extend the built in `TextInputAutocompleteMenuComponent` component to use a custom template
             */
            this.menuComponent = TextInputAutocompleteMenuComponent;
            /**
             * Called when the options menu is shown
             */
            this.menuShown = new core.EventEmitter();
            /**
             * Called when the options menu is hidden
             */
            this.menuHidden = new core.EventEmitter();
            /**
             * Called when a choice is selected
             */
            this.choiceSelected = new core.EventEmitter();
            /**
             * A function that formats the selected choice once selected.
             */
            this.getChoiceLabel = function (choice) { return choice; };
            this.menuHidden$ = new rxjs.Subject();
        }
        /**
         * @param {?} key
         * @return {?}
         */
        TextInputAutocompleteDirective.prototype.onKeypress = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (key === this.triggerCharacter) {
                    this.showMenu();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TextInputAutocompleteDirective.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                if (this.menu) {
                    if (value[this.menu.triggerCharacterPosition] !== this.triggerCharacter) {
                        this.hideMenu();
                    }
                    else {
                        var /** @type {?} */ cursor = this.elm.nativeElement.selectionStart;
                        if (cursor < this.menu.triggerCharacterPosition) {
                            this.hideMenu();
                        }
                        else {
                            var /** @type {?} */ searchText = value.slice(this.menu.triggerCharacterPosition + 1, cursor);
                            if (!searchText.match(this.searchRegexp)) {
                                this.hideMenu();
                            }
                            else {
                                this.menu.component.instance.searchText = searchText;
                                this.menu.component.instance.choices = [];
                                this.menu.component.instance.choiceLoadError = undefined;
                                this.menu.component.instance.choiceLoading = true;
                                this.menu.component.changeDetectorRef.detectChanges();
                                Promise.resolve(this.findChoices(searchText))
                                    .then(function (choices) {
                                    if (_this.menu) {
                                        _this.menu.component.instance.choices = choices;
                                        _this.menu.component.instance.choiceLoading = false;
                                        _this.menu.component.changeDetectorRef.detectChanges();
                                    }
                                })
                                    .catch(function (err) {
                                    if (_this.menu) {
                                        _this.menu.component.instance.choiceLoading = false;
                                        _this.menu.component.instance.choiceLoadError = err;
                                        _this.menu.component.changeDetectorRef.detectChanges();
                                    }
                                });
                            }
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        TextInputAutocompleteDirective.prototype.onBlur = /**
         * @return {?}
         */
            function () {
                if (this.menu) {
                    this.menu.lastCaretPosition = this.elm.nativeElement.selectionStart;
                }
            };
        /**
         * @return {?}
         */
        TextInputAutocompleteDirective.prototype.showMenu = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.menu) {
                    var /** @type {?} */ menuFactory = this.componentFactoryResolver.resolveComponentFactory(this.menuComponent);
                    this.menu = {
                        component: this.viewContainerRef.createComponent(menuFactory, 0, this.injector),
                        triggerCharacterPosition: this.elm.nativeElement.selectionStart
                    };
                    var /** @type {?} */ lineHeight = +((getComputedStyle(this.elm.nativeElement).lineHeight)).replace(/px$/, '');
                    var _a = getCaretCoordinates(this.elm.nativeElement, this.elm.nativeElement.selectionStart), top_1 = _a.top, left = _a.left;
                    this.menu.component.instance.position = {
                        top: top_1 + lineHeight,
                        left: left
                    };
                    this.menu.component.changeDetectorRef.detectChanges();
                    this.menu.component.instance.selectChoice
                        .pipe(operators.takeUntil(this.menuHidden$))
                        .subscribe(function (choice) {
                        var /** @type {?} */ label = _this.getChoiceLabel(choice);
                        var /** @type {?} */ textarea = _this.elm.nativeElement;
                        var /** @type {?} */ value = textarea.value;
                        var /** @type {?} */ startIndex = ((_this.menu)).triggerCharacterPosition;
                        var /** @type {?} */ start = value.slice(0, startIndex);
                        var /** @type {?} */ caretPosition = ((_this.menu)).lastCaretPosition || textarea.selectionStart;
                        var /** @type {?} */ end = value.slice(caretPosition);
                        textarea.value = start + label + end;
                        // force ng model / form control to update
                        textarea.dispatchEvent(new Event('input'));
                        _this.hideMenu();
                        var /** @type {?} */ setCursorAt = (start + label).length;
                        textarea.setSelectionRange(setCursorAt, setCursorAt);
                        textarea.focus();
                        _this.choiceSelected.emit({
                            choice: choice,
                            insertedAt: {
                                start: startIndex,
                                end: startIndex + label.length
                            }
                        });
                    });
                    this.menuShown.emit();
                }
            };
        /**
         * @return {?}
         */
        TextInputAutocompleteDirective.prototype.hideMenu = /**
         * @return {?}
         */
            function () {
                if (this.menu) {
                    this.menu.component.destroy();
                    this.menuHidden$.next();
                    this.menuHidden.emit();
                    this.menu = undefined;
                }
            };
        /**
         * @return {?}
         */
        TextInputAutocompleteDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.hideMenu();
            };
        TextInputAutocompleteDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'textarea[mwlTextInputAutocomplete],input[type="text"][mwlTextInputAutocomplete]'
                    },] },
        ];
        /** @nocollapse */
        TextInputAutocompleteDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver },
                { type: core.ViewContainerRef },
                { type: core.Injector },
                { type: core.ElementRef }
            ];
        };
        TextInputAutocompleteDirective.propDecorators = {
            triggerCharacter: [{ type: core.Input }],
            searchRegexp: [{ type: core.Input }],
            menuComponent: [{ type: core.Input }],
            menuShown: [{ type: core.Output }],
            menuHidden: [{ type: core.Output }],
            choiceSelected: [{ type: core.Output }],
            findChoices: [{ type: core.Input }],
            getChoiceLabel: [{ type: core.Input }],
            onKeypress: [{ type: core.HostListener, args: ['keypress', ['$event.key'],] }],
            onChange: [{ type: core.HostListener, args: ['input', ['$event.target.value'],] }],
            onBlur: [{ type: core.HostListener, args: ['blur',] }]
        };
        return TextInputAutocompleteDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TextInputAutocompleteContainerComponent = (function () {
        function TextInputAutocompleteContainerComponent() {
        }
        TextInputAutocompleteContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mwl-text-input-autocomplete-container',
                        styles: [
                            "\n    :host {\n      position: relative;\n      display: block;\n    }\n  "
                        ],
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        return TextInputAutocompleteContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TextInputAutocompleteModule = (function () {
        function TextInputAutocompleteModule() {
        }
        TextInputAutocompleteModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TextInputAutocompleteDirective,
                            TextInputAutocompleteContainerComponent,
                            TextInputAutocompleteMenuComponent
                        ],
                        imports: [common.CommonModule],
                        exports: [
                            TextInputAutocompleteDirective,
                            TextInputAutocompleteContainerComponent,
                            TextInputAutocompleteMenuComponent
                        ],
                        entryComponents: [TextInputAutocompleteMenuComponent]
                    },] },
        ];
        return TextInputAutocompleteModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.TextInputAutocompleteMenuComponent = TextInputAutocompleteMenuComponent;
    exports.TextInputAutocompleteModule = TextInputAutocompleteModule;
    exports.ɵb = TextInputAutocompleteContainerComponent;
    exports.ɵa = TextInputAutocompleteDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,