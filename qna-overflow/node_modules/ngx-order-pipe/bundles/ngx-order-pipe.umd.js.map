{"version":3,"file":"ngx-order-pipe.umd.js","sources":["~/ngx-order-pipe/src/app/order-pipe/ngx-order.module.ts","~/ngx-order-pipe/src/app/order-pipe/ngx-order.pipe.ts"],"sourcesContent":["/**\n * Created by vadimdez on 20/01/2017.\n */\n\nimport { NgModule } from '@angular/core';\nimport { OrderPipe } from './ngx-order.pipe';\nexport class OrderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [OrderPipe],\n  exports: [OrderPipe],\n  providers: [OrderPipe]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OrderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOrderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOrderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nexport class OrderPipe implements PipeTransform {\n/**\n * Check if a value is a string\n * \n * @param {?} value\n * @return {?}\n */\nstatic isString(value: any) {\n    return typeof value === 'string' || value instanceof String;\n  }\n/**\n * Sorts values ignoring the case\n * \n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nstatic caseInsensitiveSort(a: any, b: any) {\n    if (OrderPipe.isString(a) && OrderPipe.isString(b)) {\n      return a.localeCompare(b);\n    }\n    return OrderPipe.defaultCompare(a, b);\n  }\n/**\n * Default compare method\n * \n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nstatic defaultCompare(a: any, b: any) {\n    if (a === b) {\n      return 0;\n    }\n    if (a == null) {\n      return 1;\n    }\n    if (b == null) {\n      return -1;\n    }\n    return a > b ? 1 : -1;\n  }\n/**\n * Parse expression, split into items\n * @param {?} expression\n * @return {?}\n */\nstatic parseExpression(expression: string): string[] {\n    expression = expression.replace(/\\[(\\w+)\\]/g, '.$1');\n    expression = expression.replace(/^\\./, '');\n    return expression.split('.');\n  }\n/**\n * Get value by expression\n * \n * @param {?} object\n * @param {?} expression\n * @return {?}\n */\nstatic getValue(object: any, expression: string[]) {\n    for (let /** @type {?} */ i = 0, /** @type {?} */ n = expression.length; i < n; ++i) {\n      const /** @type {?} */ k = expression[i];\n      if (!(k in object)) {\n        return;\n      }\n      object = object[k];\n    }\n\n    return object;\n  }\n/**\n * Set value by expression\n * \n * @param {?} object\n * @param {?} value\n * @param {?} expression\n * @return {?}\n */\nstatic setValue(object: any, value: any, expression: string[]) {\n    let /** @type {?} */ i;\n    for (i = 0; i < expression.length - 1; i++) {\n      object = object[expression[i]];\n    }\n\n    object[expression[i]] = value;\n  }\n/**\n * @param {?} value\n * @param {?=} expression\n * @param {?=} reverse\n * @param {?=} isCaseInsensitive\n * @param {?=} comparator\n * @return {?}\n */\ntransform(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive: boolean = false, comparator?: Function): any {\n    if (!value) {\n      return value;\n    }\n\n    if (Array.isArray(expression)) {\n      return this.multiExpressionTransform(value, expression, reverse, isCaseInsensitive, comparator);\n    }\n    \n    if (Array.isArray(value)) {\n      return this.sortArray(value.slice(), expression, reverse, isCaseInsensitive, comparator);\n    }\n    \n    if (typeof value === 'object') {\n      return this.transformObject(Object.assign({}, value), expression, reverse, isCaseInsensitive, comparator);\n    }\n\n    return value;\n  }\n/**\n * Sort array\n * \n * @param {?} value\n * @param {?=} expression\n * @param {?=} reverse\n * @param {?=} isCaseInsensitive\n * @param {?=} comparator\n * @return {?}\n */\nprivate sortArray(value: any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any[] {\n    const /** @type {?} */ isDeepLink = expression && expression.indexOf('.') !== -1;\n\n    if (isDeepLink) {\n      expression = OrderPipe.parseExpression(expression);\n    }\n\n    let /** @type {?} */ compareFn: Function;\n    \n    if (comparator && typeof comparator === 'function') {\n      compareFn = comparator;\n    } else {\n      compareFn = isCaseInsensitive ? OrderPipe.caseInsensitiveSort : OrderPipe.defaultCompare;\n    }\n    \n    let /** @type {?} */ array: any[] = value.sort((a: any, b: any): number => {\n      if (!expression) {\n        return compareFn(a, b);\n      }\n\n      if (!isDeepLink) {\n        if (a && b) {\n          return compareFn(a[expression], b[expression]);\n        }\n        return compareFn(a, b);\n      }\n      \n      return compareFn(OrderPipe.getValue(a, expression), OrderPipe.getValue(b, expression));\n    });\n\n    if (reverse) {\n      return array.reverse();\n    }\n\n    return array;\n  }\n/**\n * Transform Object\n * \n * @param {?} value\n * @param {?=} expression\n * @param {?=} reverse\n * @param {?=} isCaseInsensitive\n * @param {?=} comparator\n * @return {?}\n */\nprivate transformObject(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any {\n\n    let /** @type {?} */ parsedExpression = OrderPipe.parseExpression(expression);\n    let /** @type {?} */ lastPredicate = parsedExpression.pop();\n    let /** @type {?} */ oldValue = OrderPipe.getValue(value, parsedExpression);\n\n    if (!Array.isArray(oldValue)) {\n      parsedExpression.push(lastPredicate);\n      lastPredicate = null;\n      oldValue = OrderPipe.getValue(value, parsedExpression);\n    }\n\n    if (!oldValue) {\n      return value;\n    }\n\n    OrderPipe.setValue(value, this.transform(oldValue, lastPredicate, reverse, isCaseInsensitive), parsedExpression);\n    return value;\n  }\n/**\n * Apply multiple expressions\n * \n * @param {?} value\n * @param {?} expressions\n * @param {?} reverse\n * @param {?=} isCaseInsensitive\n * @param {?=} comparator\n * @return {?}\n */\nprivate multiExpressionTransform(value: any, expressions: any[], reverse: boolean, isCaseInsensitive: boolean = false, comparator?: Function): any {\n    return expressions.reverse().reduce((result: any, expression: any) => {\n      return this.transform(result, expression, reverse, isCaseInsensitive, comparator);\n    }, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'orderBy',\n  pure: false\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OrderPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nOrderPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOrderPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgModule","Pipe"],"mappings":"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"}
